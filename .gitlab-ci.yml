stages:
  - test
  - deploy

include:
  - component: $CI_SERVER_FQDN/components/docker/config-docker-simple@~latest
    inputs:
      as: "docker-lint"
      local_path: "deployments/dev-1-vm-1"


deploy-n8n:
  stage: deploy
  image: alpine:latest
  variables:
    SSH_KEY: $SSH_KEY_GITLAB_RUNNER
    PROJECT_FILE: docker-compose.yaml
    ENV_FILE: .env
    LOCAL_PATH: "deployments/dev-1-vm-1"
    REMOTE_HOST: "dev-1-vm.margusm.dev"
    REMOTE_USER: "margus"
    REMOTE_PATH: "deployments/n8n-dev-1-vm-1"
  before_script:
    - echo "Before → Executing..."
    - apk add --no-cache curl openssh-client
    - echo "$SSH_KEY" > id_rsa && chmod 600 id_rsa
    - eval $(ssh-agent -s)
    - ssh-add id_rsa
  script: 
    - echo "Script → Executing..."

    - echo "Script → Replacing Gitlab variables in .env"
    - sed -i "s/<GITLAB_POSTGRES_DB>/$GITLAB_POSTGRES_DB/" $LOCAL_PATH/$ENV_FILE
    - sed -i "s/<GITLAB_POSTGRES_USER>/$GITLAB_POSTGRES_USER/" $LOCAL_PATH/$ENV_FILE   
    - sed -i "s/<GITLAB_POSTGRES_PASSWORD>/$GITLAB_POSTGRES_PASSWORD/" $LOCAL_PATH/$ENV_FILE

    - echo "Script → Copying files to remote host"
    - ssh -o StrictHostKeyChecking=no ${REMOTE_USER}@${REMOTE_HOST} "mkdir -p $REMOTE_PATH"
    - scp -r $LOCAL_PATH/. ${REMOTE_USER}@${REMOTE_HOST}:$REMOTE_PATH/
    
    - echo "Script → Executing remote commands"
    - ssh ${REMOTE_USER}@${REMOTE_HOST} "docker compose -f $REMOTE_PATH/$PROJECT_FILE pull"
    - ssh ${REMOTE_USER}@${REMOTE_HOST} "docker compose -f $REMOTE_PATH/$PROJECT_FILE down --remove-orphans"
    - ssh ${REMOTE_USER}@${REMOTE_HOST} "docker compose -f $REMOTE_PATH/$PROJECT_FILE up -d"
    
    - echo "Script ✓ Done"
  rules:
    - if: '$CI_COMMIT_REF_NAME == "main"'
      changes:
        - $LOCAL_PATH/**
        - .gitlab-ci.yml
    - when: manual
